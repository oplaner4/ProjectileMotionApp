@using ProjectileMotionWeb.Models;
@using Utilities.Units;
@using Utilities.Quantities;
@using ProjectileMotionSource.Func;

@model SetPropertiesModel


@{
    _EditorForHtmlAdditionalDataModel additionalDataForQuantityInputs = new _EditorForHtmlAdditionalDataModel(new _EditorForHtmlAttributesModel_TypeNumber() { Class = "form-control mr-md-2" });
    _EditorForHtmlAdditionalDataModel additionalDataForFilenamesInputs = new _EditorForHtmlAdditionalDataModel(new _EditorForHtmlAttributesModel() { Placeholder = "use default name instead" });

}


@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger alert-dismissible fade show">
        <strong>Please repair these validation errors</strong>
        <div class="row mt-2">
            <div class="col-lg-8 col-md-9">
                <ul class="list-group ml-md-1">
                    @foreach (ModelError err in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li class="list-group-item list-group-item-danger">@err.ErrorMessage</li>
                    }
                </ul>
            </div>
        </div>

        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}


@using (Html.BeginForm("Properties", "Set", FormMethod.Post, new _EditorForHtmlAttributesModel() { Class = "jumbotron" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-5 col-lg-6">
            <h5 class="mb-3">Neglect resistance</h5>
            <div class=" ml-md-2">
                <div class="form-group d-flex justify-content-center justify-content-md-start">
                    <div class="alternative-checkbox alternative-checkbox-switch-toggler">
                        @Html.CheckBoxFor(m => m.Quantities.WithResistance, Model.Quantities.WithResistance ? new _EditorForHtmlAttributesModel_Checked() : null)
                        @Html.LabelFor(m => m.Quantities.WithResistance)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7 col-lg-6">
            <h5 class="mb-3">Recalculate values on unit change</h5>
            <div class="ml-md-2">
                <div class="form-group d-flex justify-content-center justify-content-md-start">
                    <div class="alternative-checkbox alternative-checkbox-switch-toggler">
                        @Html.CheckBoxFor(m => m.RecalculateOnUnitChange, Model.RecalculateOnUnitChange ? new _EditorForHtmlAttributesModel_Checked() : null)
                        @Html.LabelFor(m => m.RecalculateOnUnitChange)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 WithoutResistancecollapse collapse show">
            <h5 class="mb-3">Possible assignments</h5>
            <div class="ml-md-2 mb-2">
                <select name="@Html.NameFor(m=> m.Quantities.SelectedAssignmentType)" class="form-control" style="width:auto">
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.Basic == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupInitialVelocityCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.Basic.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.Basic]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByDuration == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupDurationCollapse formQuantityGroupInitialVelocityCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByDuration.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByDuration]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLength == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupLengthCollapse formQuantityGroupInitialVelocityCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLength.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLength]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByMaxHeight == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupMaxHeightCollapse formQuantityGroupInitialVelocityCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByMaxHeight.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByMaxHeight]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleGetMaxRange == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupInitialVelocityCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleGetMaxRange.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleGetMaxRange]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLengthAndDur == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupDurationCollapse formQuantityGroupLengthCollapse formQuantityGroupInitialVelocityCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLengthAndDur.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.ElevationAngleByLengthAndDur]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByDuration == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupDurationCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialVelocityCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByDuration.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByDuration]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByLength == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupLengthCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialVelocityCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByLength.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByLength]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByMaxHeight == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupMaxHeightCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialVelocityCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByMaxHeight.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialHeightByMaxHeight]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByDuration == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupDurationCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByDuration.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByDuration]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLength == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupLengthCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLength.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLength]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByMaxHeight == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupMaxHeightCollapse formQuantityGroupElevationAngleCollapse formQuantityGroupInitialHeightCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByMaxHeight.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByMaxHeight]</option>
                    <option class="formQuantityGroupCollapseTrigger" @(ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLengthAndDur == Model.Quantities.SelectedAssignmentType ? "selected" : string.Empty) data-selected-collapse-show="formQuantityGroupDurationCollapse formQuantityGroupLengthCollapse formQuantityGroupElevationAngleCollapse" value="@ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLengthAndDur.ToString()">@ProjectileMotionQuantities.AssignmentsTypesTranslations[ProjectileMotionQuantities.AssignmentsTypes.InitialVelocityByLengthAndDur]</option>
                </select>
            </div>
        </div>
        <div class="col-12">
            <h5 class="mb-3">Quantities</h5>
            <div class="formQuantityGroupCollapseGroup formQuantityGroupCollapseGroup-hidden">
                <div class="row">
                    <div class="col-md-6 collapse formQuantityGroupLengthCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">
                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.Length, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.Length),
                                    Html.ValidationMessageFor(m => m.Quantities.Length),
                                    Html.NameFor(m => m.Quantities.Length),
                                    Html.NameFor(m => m.Quantities.LengthUnit),
                                    Model.Quantities.LengthUnit,
                                    typeof(UnitLength)
                                )
                            )
                        </div>
                    </div>
                    <div class="col-md-6 collapse formQuantityGroupMaxHeightCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">
                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.MaxHeight, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.MaxHeight),
                                    Html.ValidationMessageFor(m => m.Quantities.MaxHeight),
                                    Html.NameFor(m => m.Quantities.MaxHeight),
                                    Html.NameFor(m => m.Quantities.MaxHeightUnit),
                                    Model.Quantities.MaxHeightUnit,
                                    typeof(UnitLength)
                                )
                            )
                        </div>
                    </div>
                    <div class="col-md-6 collapse formQuantityGroupDurationCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">
                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.Duration, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.Duration),
                                    Html.ValidationMessageFor(m => m.Quantities.Duration),
                                    Html.NameFor(m => m.Quantities.Duration),
                                    Html.NameFor(m => m.Quantities.DurationUnit),
                                    Model.Quantities.DurationUnit,
                                    typeof(UnitTime)
                                )
                            )
                        </div>
                    </div>
                    <div class="col-md-6 collapse formQuantityGroupInitialVelocityCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">
                            @Html.Partial("_FormQuantityGroup",
                            new _FormQuantityGroupModel(
                                Html.EditorFor(m => m.Quantities.InitialVelocity, additionalDataForQuantityInputs),
                                Html.LabelFor(m => m.Quantities.InitialVelocity),
                                Html.ValidationMessageFor(m => m.Quantities.InitialVelocity),
                                Html.NameFor(m => m.Quantities.InitialVelocity),
                                Html.NameFor(m => m.Quantities.InitialVelocityUnit),
                                Model.Quantities.InitialVelocityUnit,
                                typeof(UnitVelocity)
                                )
                            )
                        </div>
                    </div>
                    <div class="col-md-6 collapse formQuantityGroupElevationAngleCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">

                            @{
                                Dictionary<string, double> predefinedElevationAnglesDic = new Dictionary<string, double>();
                                foreach (ElevationAngle.ElevationAngleTypes t in Enum.GetValues(typeof(ElevationAngle.ElevationAngleTypes)))
                                {
                                    predefinedElevationAnglesDic.Add(t.ToString(), ElevationAngle.GetElevationAngleValue(t));
                                }
                            }

                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.ElevationAngle, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.ElevationAngle),
                                    Html.ValidationMessageFor(m => m.Quantities.ElevationAngle),
                                    Html.NameFor(m => m.Quantities.ElevationAngle),
                                    Html.NameFor(m => m.Quantities.ElevationAngleUnit),
                                    Model.Quantities.ElevationAngleUnit,
                                    typeof(UnitAngle),
                                    predefinedElevationAnglesDic
                               )
                            )
                        </div>
                    </div>
                    <div class="col-md-6 collapse formQuantityGroupInitialHeightCollapse formQuantityGroupCollapse">
                        <div class="ml-md-2">
                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.InitialHeight, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.InitialHeight),
                                    Html.ValidationMessageFor(m => m.Quantities.InitialHeight),
                                    Html.NameFor(m => m.Quantities.InitialHeight),
                                    Html.NameFor(m => m.Quantities.InitialHeightUnit),
                                    Model.Quantities.InitialHeightUnit,
                                    typeof(UnitLength)
                               )
                            )
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="ml-md-2">
                            @{
                                Dictionary<string, double> predefinedGravAccelerationsDic = new Dictionary<string, double>();
                                foreach (GravAcceleration.GravAccelerations g in Enum.GetValues(typeof(GravAcceleration.GravAccelerations)))
                                {
                                    predefinedGravAccelerationsDic.Add(g.ToString(), GravAcceleration.GetGravAccelerationValue(g));
                                }
                            }

                            @Html.Partial("_FormQuantityGroup",
                                new _FormQuantityGroupModel(
                                    Html.EditorFor(m => m.Quantities.GravAcceleration, additionalDataForQuantityInputs),
                                    Html.LabelFor(m => m.Quantities.GravAcceleration),
                                    Html.ValidationMessageFor(m => m.Quantities.GravAcceleration),
                                    Html.NameFor(m => m.Quantities.GravAcceleration),
                                    Html.NameFor(m => m.Quantities.GravAccelerationUnit),
                                    Model.Quantities.GravAccelerationUnit,
                                    typeof(UnitGravAcceleration),
                                    predefinedGravAccelerationsDic
                               )
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 WithResistancecollapse collapse">
            <div class="ml-md-2">
                @{
                    Dictionary<string, double> predefinedDensitiesDic = new Dictionary<string, double>();
                    foreach (Density.Densities ρ in Enum.GetValues(typeof(Density.Densities)))
                    {
                        predefinedDensitiesDic.Add(ρ.ToString(), Density.GetDensityValue(ρ));
                    }
                }

                @Html.Partial("_FormQuantityGroup",
                    new _FormQuantityGroupModel(
                        Html.EditorFor(m => m.Quantities.Density, additionalDataForQuantityInputs),
                        Html.LabelFor(m => m.Quantities.Density),
                        Html.ValidationMessageFor(m => m.Quantities.Density),
                        Html.NameFor(m => m.Quantities.Density),
                        Html.NameFor(m => m.Quantities.DensityUnit),
                        Model.Quantities.DensityUnit,
                        typeof(UnitDensity),
                        predefinedDensitiesDic
                   )
                )
            </div>
        </div>
        <div class="col-md-6 WithResistancecollapse collapse">
            <div class="ml-md-2">
                @Html.Partial("_FormQuantityGroup",
                    new _FormQuantityGroupModel(
                        Html.EditorFor(m => m.Quantities.Mass, additionalDataForQuantityInputs),
                        Html.LabelFor(m => m.Quantities.Mass),
                        Html.ValidationMessageFor(m => m.Quantities.Mass),
                        Html.NameFor(m => m.Quantities.Mass),
                        Html.NameFor(m => m.Quantities.MassUnit),
                        Model.Quantities.MassUnit,
                        typeof(UnitMass)
                   )
                )
            </div>
        </div>
        <div class="col-md-6 WithResistancecollapse collapse">
            <div class="ml-md-2">
                @Html.Partial("_FormQuantityGroup",
                    new _FormQuantityGroupModel(
                        Html.EditorFor(m => m.Quantities.FrontalArea, additionalDataForQuantityInputs),
                        Html.LabelFor(m => m.Quantities.FrontalArea),
                        Html.ValidationMessageFor(m => m.Quantities.FrontalArea),
                        Html.NameFor(m => m.Quantities.FrontalArea),
                        Html.NameFor(m => m.Quantities.FrontalAreaUnit),
                        Model.Quantities.FrontalAreaUnit,
                        typeof(UnitArea)
                   )
                )
            </div>
        </div>
        <div class="col-md-6 WithResistancecollapse collapse">
            <div class="ml-md-2">
                @{
                    Dictionary<string, double> PredefinedDragCoefficientsDic = new Dictionary<string, double>();
                    foreach (DragCoefficient.DragCoefficients c in Enum.GetValues(typeof(DragCoefficient.DragCoefficients)))
                    {
                        PredefinedDragCoefficientsDic.Add(c.ToString(), DragCoefficient.GetDragCoefficientValue(c));
                    }
                }

                @Html.Partial("_FormQuantityGroup",
                    new _FormQuantityGroupModel(
                        Html.EditorFor(m => m.Quantities.DragCoefficient, additionalDataForQuantityInputs),
                        Html.LabelFor(m => m.Quantities.DragCoefficient),
                        Html.ValidationMessageFor(m => m.Quantities.DragCoefficient),
                        Html.NameFor(m => m.Quantities.DragCoefficient), null, null, null, PredefinedDragCoefficientsDic
                   )
                )
            </div>
        </div>
        <div class="col-12">
            <h5 class="mb-3">Units of results</h5>
        </div>
        <div class="col-md-6">
            <div class="ml-md-2">
                @Html.Partial("_FormResultUnitGroup",
                    new _FormResultUnitGroupModel(
                        Html.LabelFor(m => m.ResultUnitVelocity),
                        Html.NameFor(m => m.ResultUnitVelocity),
                        typeof(UnitVelocity),
                        Model.ResultUnitVelocity
                   )
                )

                @Html.Partial("_FormResultUnitGroup",
                    new _FormResultUnitGroupModel(
                        Html.LabelFor(m => m.ResultUnitAngle),
                        Html.NameFor(m => m.ResultUnitAngle),
                        typeof(UnitAngle),
                        Model.ResultUnitAngle
                   )
                )

                @Html.Partial("_FormResultUnitGroup",
                    new _FormResultUnitGroupModel(
                        Html.LabelFor(m => m.ResultUnitLength),
                        Html.NameFor(m => m.ResultUnitLength),
                        typeof(UnitLength),
                        Model.ResultUnitLength
                   )
                )
            </div>
        </div>
        <div class="col-md-6">
            @Html.Partial("_FormResultUnitGroup",
                new _FormResultUnitGroupModel(
                    Html.LabelFor(m => m.ResultUnitGravAcceleration),
                    Html.NameFor(m => m.ResultUnitGravAcceleration),
                    typeof(UnitGravAcceleration),
                    Model.ResultUnitGravAcceleration
               )
            )

            @Html.Partial("_FormResultUnitGroup",
                new _FormResultUnitGroupModel(
                    Html.LabelFor(m => m.ResultUnitTime),
                    Html.NameFor(m => m.ResultUnitTime),
                    typeof(UnitTime),
                    Model.ResultUnitTime
               )
            )

            <div class="WithResistancecollapse collapse" aria-expanded="false">
                @Html.Partial("_FormResultUnitGroup",
                    new _FormResultUnitGroupModel(
                        Html.LabelFor(m => m.ResultUnitArea),
                        Html.NameFor(m => m.ResultUnitArea),
                        typeof(UnitArea),
                        Model.ResultUnitArea
                   )
                )
            </div>
        </div>
        <div class="col-12">
            <h5 class="mb-3">Other settings</h5>
        </div>
        <div class="col-md-6">
            <div class="ml-md-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.RoundDigits)
                    @Html.EditorFor(m => m.RoundDigits, Model.DefaultEditorForAdditionalData)
                    <small class="form-text text-danger">@Html.ValidationMessageFor(m => m.RoundDigits)</small>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.CsvDataFileName)
                    @Html.EditorFor(m => m.CsvDataFileName, additionalDataForFilenamesInputs)
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.PdfInfoFileName)
                    @Html.EditorFor(m => m.PdfInfoFileName, additionalDataForFilenamesInputs)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.TxtInfoFileName)
                @Html.EditorFor(m => m.TxtInfoFileName, additionalDataForFilenamesInputs)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.PointsForTrajectory)
                @Html.EditorFor(m => m.PointsForTrajectory, Model.DefaultEditorForAdditionalData)
                <small class="form-text text-danger">@Html.ValidationMessageFor(m => m.PointsForTrajectory)</small>
            </div>

            <div class="form-group">

                @Html.LabelFor(m => m.HexColorOfTrajectory)
                <div class="color-picker">
                    @Html.EditorFor(m => m.HexColorOfTrajectory, Model.DefaultEditorForAdditionalData)
                </div>
                <small class="form-text text-danger">@Html.ValidationMessageFor(m => m.HexColorOfTrajectory)</small>
            </div>

        </div>
        <div class="col-12">
            <div class="WithResistancecollapse collapse" aria-expanded="false">
                <div class="form-group d-flex justify-content-center justify-content-md-start">
                    <div class="alternative-checkbox alternative-checkbox-switch-toggler">
                        @Html.CheckBoxFor(m => m.ShowMotionWithoutResistanceTrajectoryToo)
                        @Html.LabelFor(m => m.ShowMotionWithoutResistanceTrajectoryToo)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="text-center mt-3">
                <input class="btn btn-lg btn-primary" type="submit" formnovalidate value="Display" />
            </div>
        </div>
    </div>
}


@section pageSpecialScript {
    <script>
        $(function () {
            Number.prototype.countDecimals = function () {
                if (Math.floor(this.valueOf()) === this.valueOf()) return 0;
                return this.toString().split(".")[1].length || 0;
            }


            Number.prototype.GetInputStep = function () {
                return Math.pow(10, -1 * this.valueOf().countDecimals()).toPrecision(1);
            }

            var formQuantityGroup = $('.form-quantity-group');
            var recalculateValuesOnUnitChange = $('input[name="@Html.NameFor(m => m.RecalculateOnUnitChange)"]');
            const prevValData = 'val-prev';

            $('input', formQuantityGroup).on('change input', function () {
                var $this = $(this);
                var val = $this.val();
                var floatN = parseFloat(val);
                var floatPrev = parseFloat($this.data(prevValData));
                if (!isNaN(floatN) && !isNaN(floatPrev)) {
                    if (floatPrev.countDecimals() < floatN.countDecimals()) {
                        $this.attr('step', floatN.GetInputStep());
                    }
                }

                $this.data(prevValData, $this.val());
            }).each(function () {
                var $this = $(this);
                var val = $this.val();
                $this.data(prevValData, val);
                var floatN = parseFloat(val);
                if (!isNaN(floatN)) {
                    $this.attr('step', floatN.GetInputStep());
                }
            });

            $('select[data-unittype]', formQuantityGroup).on('change', function () {
                var $this = $(this);

                if (recalculateValuesOnUnitChange.is(':checked')) {
                    var inp = $this.closest(formQuantityGroup).find('input');
                    $.ajax({
                        method: 'POST',
                        url: '@Url.Action("GetConvertedVal", "AjaxUnitConvert")',
                        data: {
                            value: inp.val(),
                            from: $this.data(prevValData),
                            to: $this.val(),
                            unittype: $this.data('unittype')
                        },
                        success: function (data) {
                            inp.val(data).trigger('change');
                        }
                    })
                }

                $this.data(prevValData, $this.val());
            }).each(function () {
                var $this = $(this);
                $this.data(prevValData, $this.val());
            });

            var formQuantityGroupDatainputtype = $('.form-quantity-group-datainputtype', formQuantityGroup);
            var formQuantityGroupDatainputtypeCurrent = 'form-quantity-group-datainputtype-current';
            var formQuantityGroupDatainputtypeToggler = $('.form-quantity-group-datainputtype-toggler', formQuantityGroup);

            window.formQuantityDataInputtypeStore = new Object();

            formQuantityGroupDatainputtype.not('.' + formQuantityGroupDatainputtypeCurrent).each(function () {
                var $this = $(this);
                var toggler = $this.closest(formQuantityGroup).find(formQuantityGroupDatainputtypeToggler);
                formQuantityDataInputtypeStore[toggler.data('toggler-for')] = $this.removeClass('d-none');
                $this.detach();
            });

            formQuantityGroupDatainputtypeToggler.click(function (e) {
                e.preventDefault();
                var $this = $(this);

                var togglerFor = $this.data('toggler-for');
                var notCurrentFormQuantityDatainputtype = formQuantityDataInputtypeStore[togglerFor];
                var currentFormQuantityDatainputtype = $this.closest(formQuantityGroup).find(formQuantityGroupDatainputtype).filter('.' + formQuantityGroupDatainputtypeCurrent).removeClass(formQuantityGroupDatainputtypeCurrent);
                notCurrentFormQuantityDatainputtype.addClass(formQuantityGroupDatainputtypeCurrent).insertBefore(currentFormQuantityDatainputtype);
                formQuantityDataInputtypeStore[togglerFor] = currentFormQuantityDatainputtype;
                currentFormQuantityDatainputtype.detach();


                var textToggle = 'text-toggle';
                var data = $this.data(textToggle);
                $this.data(textToggle, $this.find('span').text()).find('span').text(data);
                return false;
            });



            var collapse = $('.collapse');
            var optionFormQuantityGroupCollapseTrigger = $('option.formQuantityGroupCollapseTrigger');
            var formQuantityGroupCollapseGroup = $('.formQuantityGroupCollapseGroup');
            var formQuantityGroupCollapse = formQuantityGroupCollapseGroup.find(collapse);

            optionFormQuantityGroupCollapseTrigger.parent().change(function () {
                var hideFormQuantityGroupCollapse = formQuantityGroupCollapse;
                var $this = $(this);
                formQuantityGroupCollapseGroup.slideUp(200, function () {
                    $this.children(optionFormQuantityGroupCollapseTrigger).filter(":selected").data('selected-collapse-show').split(/\s+/gi).forEach(function (v) {
                        var showFormQuantityGroupCollapse = formQuantityGroupCollapse.filter('.' + v);
                        showFormQuantityGroupCollapse.collapse('show');
                        hideFormQuantityGroupCollapse = hideFormQuantityGroupCollapse.not(showFormQuantityGroupCollapse);
                    });

                    hideFormQuantityGroupCollapse.collapse('hide');

                    setTimeout(function () {
                        formQuantityGroupCollapseGroup.slideDown(350);
                    }, 100);
                });

            }).trigger('change');


            var withResistanceCollapse = collapse.filter('.WithResistancecollapse');
            var withoutResistanceCollapse = collapse.filter('.WithoutResistancecollapse');
            var withResistanceCheckboxChecked = function () {
                withResistanceCollapse.collapse('show');
                withoutResistanceCollapse.collapse('hide');
                optionFormQuantityGroupCollapseTrigger.parent().val('@ProjectileMotionQuantities.AssignmentsTypes.Basic.ToString()').trigger('change');
            }

            if ($('input[type="checkbox"][name="@Html.NameFor(m=> m.Quantities.WithResistance)"]').change(function () {
                if (this.checked) {
                    withResistanceCheckboxChecked();
                }
                else {
                    withResistanceCollapse.collapse('hide');
                    withoutResistanceCollapse.collapse('show');
                }
            }).is(':checked')) {
                withResistanceCheckboxChecked();
            };
        });
    </script>
}